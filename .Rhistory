series <- serie_p_analise
quant <- length(series)
#saida <- t(simplify2array(mclapply(1:quant, function(i){
saida <- sapply(1:quant, function(i){
print(i)
data <- series[[i]]
data2 <- data
data2$rsi <- TTR::RSI(as.numeric(data2$closing))
#' --
temp <- try(data.frame(data2,TTR::MACD(as.numeric(data2$closing), 12, 26, 9, maType="SMA")), T)
if(typeof(temp) != 'double') temp <- TTR::MACD(as.numeric(data2$closing), 12, 20, 9, maType="SMA")
#' --
data2 <- data.frame(data2, temp)
data2$will <- TTR::williamsAD(data2[,c("highest","lowest","closing")])
data2$cci <-  TTR::CCI(data2[,c("highest","lowest","closing")])
data2 <- data.frame(data2,TTR::stoch(data2[,c("highest","lowest","closing")]))
data2 <- data.frame(data2,TTR::aroon(data2[, c("highest","lowest")]))
data2 <- data.frame(data2,TTR::ATR(data2[, c("highest","lowest","closing")]))
data2$Return <- c(NA,diff(log(data2$closing)))
x <- nrow(data2)
ultcolun <- ncol(data2)
#For log data close
for (i in 0:(x-1)){
data2[i, ultcolun] <- data2[i+1, ultcolun]
}
fit1 <- nnet::nnet( Return~ opening+highest+lowest+closing+volume+rsi+macd+
signal+will+cci+fastK+fastD+slowD+aroonUp+aroonDn+
oscillator+tr+atr+trueHigh+trueLow,
data = data2[1:(x-1), ], maxit = 5000,
size = 20, decay = 0.01, linout = 1)
pred <- predict(fit1, newdata = data2[(x-1), ])
vl_pred <- exp(pred[1])*data[(x-1),4] #Preço Predito
result <- ifelse((vl_pred-data[(x-1),4])>0, data$Cripto[1], "NAO")
return(result)
#}, mc.cores=cores)))
})
i=57
print(i)
data <- series[[i]]
data
variance[57]
variance <- sapply(1:length(serie_p_analise), function(i){ return(var(serie_p_analise[[i]]$avg_price))})
variance[57]
variance
summary(variance)
serie_p_analise <- subset(serie_p_analise, variance > 4 )
variance <- sapply(1:length(serie_p_analise), function(i){ return(var(serie_p_analise[[i]]$avg_price))})
summary(variance)
#' ----
#' Scripts necessarios:
source("R/Funcoes_para_Scraping_Ativos_Mercado_Bitcoin.R")
source("R/funcoes_para_series_iniciais.R")
library(parallel)
#library(TTR)
#library(nnet)
#' Pegando os núcleos
cores <- detectCores()-1
#' --
#' Lendo os dados
data <- readCsvInsideFolder("dados")
for (i in 3:ncol(data)) data[,i] <- as.numeric(data[,i])
#' --
#' Criando Lista por ativo
simbols <- unique(data$Cripto)
serie_p_analise <- lapply(1:length(simbols), \(i) data |> dplyr::filter(Cripto == simbols[i]) )
#' --
#' numero de fechamentos - pegando maiores de 20 fechamentos
rows <- sapply(1:length(serie_p_analise), function(i){ return(nrow(serie_p_analise[[i]]))})
serie_p_analise <- subset(serie_p_analise, rows > 40 )
#' -----------
variance <- sapply(1:length(serie_p_analise), function(i){ return(var(serie_p_analise[[i]]$avg_price))})
serie_p_analise <- subset(serie_p_analise, variance > 4 )
#' -----------
#' Analise da Cripto
#' --
#' Redes Neurais
redes_net <- redes_neurais_series_iniciais(serie_p_analise)
#' ----
#' Scripts necessarios:
source("R/Funcoes_para_Scraping_Ativos_Mercado_Bitcoin.R")
source("R/funcoes_para_series_iniciais.R")
library(parallel)
#library(TTR)
#library(nnet)
#' Pegando os núcleos
cores <- detectCores()-1
#' --
#' Lendo os dados
data <- readCsvInsideFolder("dados")
for (i in 3:ncol(data)) data[,i] <- as.numeric(data[,i])
#' --
#' Criando Lista por ativo
simbols <- unique(data$Cripto)
serie_p_analise <- lapply(1:length(simbols), \(i) data |> dplyr::filter(Cripto == simbols[i]) )
#' --
#' numero de fechamentos - pegando maiores de 20 fechamentos
rows <- sapply(1:length(serie_p_analise), function(i){ return(nrow(serie_p_analise[[i]]))})
serie_p_analise <- subset(serie_p_analise, rows > 40 )
#' -----------
variance <- sapply(1:length(serie_p_analise), function(i){ return(var(serie_p_analise[[i]]$avg_price))})
serie_p_analise <- subset(serie_p_analise, variance > 4 )
#' -----------
#' Analise da Cripto
#' --
#' Redes Neurais
redes_net <- redes_neurais_series_iniciais(serie_p_analise)
redes_net <- unlist(redes_net)
redes_net <- subset(redes_net,redes_net!="NAO")
redes_net
#' ---
vec <- as.numeric(substr(names(redes_net), start=2, stop=7))
serie_p_analise <- lapply(1:length(vec), function(i) serie_p_analise[[vec[i]]])
#' --------
#' --------
#' RSI
rsi <- rsi_series_iniciais(serie_p_analise)
rsi <- subset(rsi, as.numeric(as.character(rsi[,2])) < 50) # Observar esse 35
colnames(rsi) <- c("Cripto", "rsi", "dif_rsi","volume")
#' --------
vec <- attributes(rsi)$row.names
serie_p_analise <- lapply(1:length(vec), function(i) serie_p_analise[[vec[i]]])
#' --------
#' --------
#' MACD
macd <- macd_series_iniciais(serie_p_analise)
macd <- subset(macd,as.numeric(as.character(macd[,2]))>0 | as.numeric(as.character(macd[,3]))>0 )
colnames(macd) <- c("Cripto", "dif_macd_1","dif_macd_2")
# Series q ficaram
vec <- attributes(macd)$row.names
serie_p_analise <- lapply(1:length(vec), function(i) serie_p_analise[[vec[i]]])
serie_p_analise
# Series q ficaram
vec <- attributes(macd)$row.names
vec
#' --------
#' --------
#' MACD
macd <- macd_series_iniciais(serie_p_analise)
macd
macd <- subset(macd,as.numeric(as.character(macd[,2]))>0 | as.numeric(as.character(macd[,3]))>0 )
colnames(macd) <- c("Cripto", "dif_macd_1","dif_macd_2")
# Series q ficaram
vec <- attributes(macd)$row.names
serie_p_analise <- lapply(1:length(vec), function(i) serie_p_analise[[vec[i]]])
serie_p_analise
#' ---
vec <- as.numeric(substr(names(redes_net), start=2, stop=7))
vec
serie_p_analise
#' ------------------------------------------------
#'     Leitura dos dados e Analise dos precos
#'
#' Objetivo: Ler os datasets e fazer análises
#' sobre os preços ao longo dos dias
#' ------------------------------------------------
#' ----
#' Scripts necessarios:
source("R/Funcoes_para_Scraping_Ativos_Mercado_Bitcoin.R")
source("R/funcoes_para_series_iniciais.R")
library(parallel)
#library(TTR)
#library(nnet)
#' Pegando os núcleos
cores <- detectCores()-1
#' --
#' Lendo os dados
data <- readCsvInsideFolder("dados")
for (i in 3:ncol(data)) data[,i] <- as.numeric(data[,i])
#' --
#' Criando Lista por ativo
simbols <- unique(data$Cripto)
serie_p_analise <- lapply(1:length(simbols), \(i) data |> dplyr::filter(Cripto == simbols[i]) )
#' --
#' numero de fechamentos - pegando maiores de 20 fechamentos
rows <- sapply(1:length(serie_p_analise), function(i){ return(nrow(serie_p_analise[[i]]))})
serie_p_analise <- subset(serie_p_analise, rows > 40 )
#' -----------
variance <- sapply(1:length(serie_p_analise), function(i){ return(var(serie_p_analise[[i]]$avg_price))})
serie_p_analise <- subset(serie_p_analise, variance > 4 )
#' -----------
#' -----------
#' Analise da Cripto
#' --
#' Redes Neurais
redes_net <- redes_neurais_series_iniciais(serie_p_analise)
redes_net <- unlist(redes_net)
redes_net <- subset(redes_net,redes_net!="NAO")
#' ---
vec <- as.numeric(substr(names(redes_net), start=2, stop=7))
serie_p_analise <- lapply(1:length(vec), function(i) serie_p_analise[[vec[i]]])
vec
#' --------
#' --------
#' RSI
rsi <- rsi_series_iniciais(serie_p_analise)
rsi
subset(rsi, as.numeric(as.character(rsi[,2])) < 50)
subset(rsi, as.numeric(as.character(rsi[,2])) < 70)
subset(rsi, as.numeric(as.character(rsi[,2])) < 60)
rsi <- subset(rsi, as.numeric(as.character(rsi[,2])) < 60) # Observar esse 35
colnames(rsi) <- c("Cripto", "rsi", "dif_rsi","volume")
#' --------
vec <- attributes(rsi)$row.names
vec
serie_p_analise <- lapply(1:length(vec), function(i) serie_p_analise[[vec[i]]])
serie_p_analise
#' --------
#' --------
#' MACD
macd <- macd_series_iniciais(serie_p_analise)
macd
macd <- subset(macd,as.numeric(as.character(macd[,2]))>0 | as.numeric(as.character(macd[,3]))>0 )
macd
colnames(macd) <- c("Cripto", "dif_macd_1","dif_macd_2")
# Series q ficaram
vec <- attributes(macd)$row.names
vec
serie_p_analise <- lapply(1:length(vec), function(i) serie_p_analise[[vec[i]]])
serie_p_analise
#' --------
#' --------
#' AROON
aroon <- aroon_series_iniciais(serie_p_analise)
aroon
subset(aroon,as.numeric(as.character(aroon[,2])) < 30 &
as.numeric(as.character(aroon[,3])) > 70 )
subset(aroon,as.numeric(as.character(aroon$aroonDn)) < 30 &
as.numeric(as.character(aroon$aroonUp)) > 70 )
aroon <- subset(aroon,as.numeric(as.character(aroon$aroonDn)) < 30 &
as.numeric(as.character(aroon$aroonUp)) > 70 )
aroon <- aroon[order(as.numeric(as.character(aroon[,2])),decreasing = T),]
aroon
colnames(aroon)[1] <- c("Cripto")
#' --------
#' Price
price <-  data |>
dplyr::filter( (Cripto %in% aroon$Cripto) & (date ==  tail(sort(data$date),1) )) |>
dplyr::select(Cripto, closing)
colnames(price) <- c("Cripto", "price")
#' --------
investir <- merge(aroon,rsi,by="Cripto")
investir <- merge(investir,macd,by="Cripto")
investir <- merge(investir,price,by="Cripto")
#' --------
#' Valor de compra. stop loss e stop gain
compra <- cbind(menorcompra=investir$price - .006*investir$price,
maiorcompra=investir$price + .006*investir$price)
compra
stop_loss <- investir$price- 0.035*investir$price
stop_loss
stop_gain <- cbind(ganho1p=investir$price+ 0.01*investir$price,
ganho2p=investir$price+ 0.02*investir$price,
ganho3p=investir$price+ 0.03*investir$price)
stop_gain
investir <- cbind(investir,compra, stop_loss, stop_gain)
investir
hora.verificacao <- format(Sys.time(), "%X - %A,  %d.%b.%Y")
# Fazendo Scraping
source("Scraping_Ativos_Mercado_Bitcoin.R")
# Fazendo Analise
source("Analise_dos_precos_criptos_Mercado_BitCoin.R")
View(serie_p_analise)
View(investir)
# Enviando Mensagem
source("Script_envio_msg_telegram_contrab.R")
investir
lm(investir$price ~ 1)
# Calculate the mean and standard error
l.model <- lm(investir$price ~ 1)
# Calculate the confidence interval
confint(l.model, level=0.95)
investir$price
investir
serie_p_analise[[[1]]]
serie_p_analise[[1]]
investir
serie_p_analise
investir
serie_p_analise[[2]]
# Calculate the mean and standard error
l.model <- lm(serie_p_analise[[2]]$avg_price ~ 1)
l.model
# Calculate the confidence interval
confint(l.model, level=0.95)
investir
attributes(investir)$Cripto
investir$Cripto
#' --------
vec <- investir$Cripto
attributes(macd)$row.names
rsi
investir
#' --------
vec <- investir$Cripto
vec
aroon
#' --------
vec <- attributes(aroon)$row.names
vec
investir
aroon
vec
which(aroon$Cripto == investir$Cripto)
aroon$Cripto
investir$Cripto[1]
aroon$Cripto[1]
which(aroon$Cripto == investir$Cripto[1])
aroon$Cripto
serie_p_analise[[3]]
#' --------
vec <- attributes(aroon)$row.names
vec
serie_p_analise <- lapply(1:length(vec), function(i) serie_p_analise[[which(aroon$Cripto == investir$Cripto[1])]])
serie_p_analise
#' ------------------------------------------------
#'     Leitura dos dados e Analise dos precos
#'
#' Objetivo: Ler os datasets e fazer análises
#' sobre os preços ao longo dos dias
#' ------------------------------------------------
#' ----
#' Scripts necessarios:
source("R/Funcoes_para_Scraping_Ativos_Mercado_Bitcoin.R")
source("R/funcoes_para_series_iniciais.R")
library(parallel)
#library(TTR)
#library(nnet)
#' Pegando os núcleos
cores <- detectCores()-1
#' --
#' Lendo os dados
data <- readCsvInsideFolder("dados")
for (i in 3:ncol(data)) data[,i] <- as.numeric(data[,i])
#' --
#' Criando Lista por ativo
simbols <- unique(data$Cripto)
serie_p_analise <- lapply(1:length(simbols), \(i) data |> dplyr::filter(Cripto == simbols[i]) )
#' --
#' numero de fechamentos - pegando maiores de 20 fechamentos
rows <- sapply(1:length(serie_p_analise), function(i){ return(nrow(serie_p_analise[[i]]))})
serie_p_analise <- subset(serie_p_analise, rows > 40 )
#' -----------
variance <- sapply(1:length(serie_p_analise), function(i){ return(var(serie_p_analise[[i]]$avg_price))})
serie_p_analise <- subset(serie_p_analise, variance > 4 )
#' -----------
#' -----------
#' Analise da Cripto
#' --
#' Redes Neurais
redes_net <- redes_neurais_series_iniciais(serie_p_analise)
redes_net <- unlist(redes_net)
redes_net <- subset(redes_net,redes_net!="NAO")
#' ---
vec <- as.numeric(substr(names(redes_net), start=2, stop=7))
serie_p_analise <- lapply(1:length(vec), function(i) serie_p_analise[[vec[i]]])
#' --------
#' --------
#' RSI
rsi <- rsi_series_iniciais(serie_p_analise)
rsi <- subset(rsi, as.numeric(as.character(rsi[,2])) < 60) # Observar esse 35
colnames(rsi) <- c("Cripto", "rsi", "dif_rsi","volume")
#' --------
vec <- attributes(rsi)$row.names
serie_p_analise <- lapply(1:length(vec), function(i) serie_p_analise[[vec[i]]])
#' --------
#' --------
#' MACD
macd <- macd_series_iniciais(serie_p_analise)
macd <- subset(macd,as.numeric(as.character(macd[,2]))>0 | as.numeric(as.character(macd[,3]))>0 )
colnames(macd) <- c("Cripto", "dif_macd_1","dif_macd_2")
# Series q ficaram
vec <- attributes(macd)$row.names
serie_p_analise <- lapply(1:length(vec), function(i) serie_p_analise[[vec[i]]])
#' --------
#' --------
#' AROON
aroon <- aroon_series_iniciais(serie_p_analise)
aroon <- subset(aroon,as.numeric(as.character(aroon$aroonDn)) < 30 &
as.numeric(as.character(aroon$aroonUp)) > 70 )
aroon <- aroon[order(as.numeric(as.character(aroon[,2])),decreasing = T),]
colnames(aroon)[1] <- c("Cripto")
#' --------
#' Price
price <-  data |>
dplyr::filter( (Cripto %in% aroon$Cripto) & (date ==  tail(sort(data$date),1) )) |>
dplyr::select(Cripto, closing)
colnames(price) <- c("Cripto", "price")
#' --------
investir <- merge(aroon,rsi,by="Cripto")
investir <- merge(investir,macd,by="Cripto")
investir <- merge(investir,price,by="Cripto")
#' --------
vec <- attributes(aroon)$row.names
serie_p_analise <- lapply(1:length(vec), function(i) serie_p_analise[[which(aroon$Cripto == investir$Cripto[i])]])
serie_p_analise
investir
#' ------------------------------------------------
#'     Leitura dos dados e Analise dos precos
#'
#' Objetivo: Ler os datasets e fazer análises
#' sobre os preços ao longo dos dias
#' ------------------------------------------------
#' ----
#' Scripts necessarios:
source("R/Funcoes_para_Scraping_Ativos_Mercado_Bitcoin.R")
source("R/funcoes_para_series_iniciais.R")
library(parallel)
#library(TTR)
#library(nnet)
#' Pegando os núcleos
cores <- detectCores()-1
#' --
#' Lendo os dados
data <- readCsvInsideFolder("dados")
for (i in 3:ncol(data)) data[,i] <- as.numeric(data[,i])
#' --
#' Criando Lista por ativo
simbols <- unique(data$Cripto)
serie_p_analise <- lapply(1:length(simbols), \(i) data |> dplyr::filter(Cripto == simbols[i]) )
#' --
#' numero de fechamentos - pegando maiores de 20 fechamentos
rows <- sapply(1:length(serie_p_analise), function(i){ return(nrow(serie_p_analise[[i]]))})
serie_p_analise <- subset(serie_p_analise, rows > 40 )
#' -----------
variance <- sapply(1:length(serie_p_analise), function(i){ return(var(serie_p_analise[[i]]$avg_price))})
serie_p_analise <- subset(serie_p_analise, variance > 4 )
#' -----------
#' -----------
#' Analise da Cripto
#' --
#' Redes Neurais
redes_net <- redes_neurais_series_iniciais(serie_p_analise)
redes_net <- unlist(redes_net)
redes_net <- subset(redes_net,redes_net!="NAO")
#' ---
vec <- as.numeric(substr(names(redes_net), start=2, stop=7))
serie_p_analise <- lapply(1:length(vec), function(i) serie_p_analise[[vec[i]]])
#' --------
#' --------
#' RSI
rsi <- rsi_series_iniciais(serie_p_analise)
rsi <- subset(rsi, as.numeric(as.character(rsi[,2])) < 60) # Observar esse 35
colnames(rsi) <- c("Cripto", "rsi", "dif_rsi","volume")
#' --------
vec <- attributes(rsi)$row.names
serie_p_analise <- lapply(1:length(vec), function(i) serie_p_analise[[vec[i]]])
#' --------
#' --------
#' MACD
macd <- macd_series_iniciais(serie_p_analise)
macd <- subset(macd,as.numeric(as.character(macd[,2]))>0 | as.numeric(as.character(macd[,3]))>0 )
colnames(macd) <- c("Cripto", "dif_macd_1","dif_macd_2")
# Series q ficaram
vec <- attributes(macd)$row.names
serie_p_analise <- lapply(1:length(vec), function(i) serie_p_analise[[vec[i]]])
#' --------
#' --------
#' AROON
aroon <- aroon_series_iniciais(serie_p_analise)
aroon <- subset(aroon,as.numeric(as.character(aroon$aroonDn)) < 30 &
as.numeric(as.character(aroon$aroonUp)) > 70 )
aroon <- aroon[order(as.numeric(as.character(aroon[,2])),decreasing = T),]
colnames(aroon)[1] <- c("Cripto")
#' --------
#' Price
price <-  data |>
dplyr::filter( (Cripto %in% aroon$Cripto) & (date ==  tail(sort(data$date),1) )) |>
dplyr::select(Cripto, closing)
colnames(price) <- c("Cripto", "price")
#' --------
investir <- merge(aroon,rsi,by="Cripto")
investir <- merge(investir,macd,by="Cripto")
investir <- merge(investir,price,by="Cripto")
investir
investir$Cripto[i]
i=1
investir$Cripto[i]
aroon$Cripto
vec <- attributes(aroon)$row.names
vec
serie_p_analise <- lapply(1:length(vec), function(i) serie_p_analise[[vec[i]]])
price
aroon$Cripto
investir$Cripto[i]
which(aroon$Cripto == investir$Cripto[i])
#' --------
serie_p_analise <- lapply(1:length(vec), function(i) serie_p_analise[[ which(aroon$Cripto == investir$Cripto[i]) ]])
serie_p_analise
investir
#' --------
# Calculate the mean and standard error
l.model <- lm(serie_p_analise[[1]]$avg_price ~ 1)
# Calculate the confidence interval
levels <- confint(l.model, level=0.95)
levels
investir$price
levels2 <- confint(l.model, level=0.97)
levels3 <- confint(l.model, level=0.99)
levels2
levels3
#' --------
#' Valor de compra. stop loss e stop gain
compra <- cbind(menorcompra=investir$price - .006*investir$price,
maiorcompra=investir$price + .006*investir$price)
stop_loss <- investir$price- 0.035*investir$price
stop_gain <- cbind(ganho1p=investir$price+ 0.01*investir$price,
ganho2p=investir$price+ 0.02*investir$price,
ganho3p=investir$price+ 0.03*investir$price)
# Fazendo Scraping
source("Scraping_Ativos_Mercado_Bitcoin.R")
# Fazendo Analise
source("Analise_dos_precos_criptos_Mercado_BitCoin.R")
